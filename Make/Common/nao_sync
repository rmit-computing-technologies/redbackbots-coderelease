#! /usr/bin/env python3

'''
nao_sync:
- Synchronise the code to the Nao robot

@author
- based on rUNSWift nao_sync
- Timothy Wiley
'''

import argparse
import datetime
import os
import multiprocessing
import sys

import rbbpython.config as cfg
from rbbpython.echo import (
    print_error,
    print_status,
    print_warning,
    print_subitem,
)
import rbbpython.install as install
import rbbpython.shellEscape as shell
import rbbpython.sshscp as scp

# Global Parameters
REDBACKBOTS_CHECKOUT_DIR = cfg.rbbCheckoutDirectory()
remote = None
#remote = scp.SshScp()

# Static/Constants strings
CHMOD_GO_NONE = 'go= '

def createImage(config, volume, wireless, debug):
    # Formatting date/time string
    now = datetime.datetime.now()

    # Format the date and time using strftime
    formatted_date = now.strftime("_%Y-%m-%d_%H-%M")
    
    # Create Home Archive 
    print_status("Creating Home Archive")
    imagePath = REDBACKBOTS_CHECKOUT_DIR + "/Build/Image/" + config
    archivePath = imagePath + "/home.tar.gz"
    os.makedirs(imagePath, exist_ok=True)
    volumeStr = '-v ' + str(volume) + ' ' if volume else ' '
    wirelessStr = '-w ' + wireless + ' ' if wireless else ' '
    command = REDBACKBOTS_CHECKOUT_DIR + "/Make/Common/createHomeArchive " + \
              "-c " + config + " " + \
              volumeStr + \
              wirelessStr + \
              "-H " + archivePath
    print_subitem(command)
    if not debug:
        shell.exec(command, hideOutput=False)
    
    # Create Image
    print()
    print_status("Creating Image")
    opnPath = imagePath + "/rbb" + formatted_date + ".opn"
    command = REDBACKBOTS_CHECKOUT_DIR + "/Install/createOPN " + \
              "-H " + archivePath + " " + \
              "-o " + opnPath + " "
    print_subitem(command)
    if not debug:
        shell.exec(command, hideOutput=False)

def compileRBB(config, debug):
    command = REDBACKBOTS_CHECKOUT_DIR + "/Make/Linux/compile " + \
              "-r " + config + " " + \
              "Nao"
    print_status("Compiling RBB for config " + config)
    print_subitem(command)
    if not debug:
        if not shell.exec(command, hideOutput=False):
            raise Exception("Compile failed")
    print()

def setDateandTime():
    print_subitem("Set Date and Time on Nao")
    command = "date -u \"+%Y-%m-%d %H:%M:%S\""
    dateStr = shell.capture(command)

    command = "sudo date -u \\\"+%Y-%m-%d %H:%M:%S\\\" --set=\\\"" + dateStr + "\\\""
    success = remote.sshCommand(command)
    if not success:
        print_warning("Could not set date and time")
    print()
    return success

def set_local_ip():
    """
    Stores on the robot the IP of the last machine to sync with it
    Used for establishing robot->PC connections (e.g a debugger)
    """
    print_subitem("Grabbing IP from SSH session")
    # https://stackoverflow.com/a/996286/5279269
    remote.sshCommandWithSession("echo $SSH_CLIENT | awk '{print $1}' > /tmp/last_sync_ip")
    return


def setupRobot(robot, robotConfig):
    print_status("Setting up " + robot)
    naoImageDir = cfg.naoImageDirectory()
    naoHomeDir = cfg.naoImageHomeDirectory()

    # Ensure SSH Keys are copied across to avoid entering password
    # checkAuth = scp.checkAuthKey()
    checkAuth = True
    if checkAuth:
        print_status("Copying SSH authorized keys")
        print_subitem("If prompted echo nao's password")

        # Make directory on remote
        remote.sshCommand("mkdir -p .ssh; chmod 700 .ssh")

        # Copy authorized keys
        remote.scpFile(scp.authKeyFile(), ".ssh/authorized_keys")

        # Set file permission
        remote.sshCommand("chmod 600 .ssh/authorized_keys")
    else:
        print_error("Your SSH Key is not configured for RBBots. Please re-run build setup before continuing")
        exit()

    # Grant sudo access
    print_status("Granting sudo access: Enter the root password (probably 'root')")
    success = remote.sshCommand("su -c 'tee /etc/sudoers <<< \\\"nao     ALL=(ALL) NOPASSWD:ALL\\\" && chmod 0440 /etc/sudoers'")
    if not success:
        print_warning("Error running su command, execute from on robot and re-run this script")
        # print_error("**SEE ABOVE: Run command: su -c 'tee /etc/sudoers <<< \"nao     ALL=(ALL) NOPASSWD:ALL\" && chmod 0440 /etc/sudoers'")
        # exit()

    # Modify ssh config
    print_status("Modifying sshd_config and restarting sshd")
    success = remote.sshCommand("sudo sed -i '/UseDNS/s/.*/UseDNS no/'  /etc/ssh/sshd_config && " +
                                "sudo sed -i /PermitRootLogin/s/no/yes/ /etc/ssh/sshd_config")
    if not success:
        print_error("Modifying failed")
        exit()

    # Copy /etc folder with all settings
    print_status("Install /etc folder components")
    src = "--no-owner --no-group --exclude=home " + naoImageDir + "/etc/"
    dest = "/etc"
    success = remote.rsyncFiles(src, dest, sudo=True)
    if not success:
        print_error("RSync /etc failed")
        exit()

    # Copy RBB Services
    print_status("Copy .config files")
    src = naoHomeDir + "/.config/"
    success = remote.rsyncFiles(src, "/home/nao/.config/", chmod=CHMOD_GO_NONE)
    if not success:
        print_error("RSync failed")
        exit()

    # We don't trust connman so we do wireless ourselves
    print_status("Configure and Enable Wireless")
    src = cfg.robotNetworkConfigDirectory(robot) + "/" + cfg.initdWirelessFile
    success = remote.rsyncFiles(src, "/etc/init.d/rbbwireless.sh", sudo=True)
    if not success:
        print_warning("RSync Failed")
    success = remote.sshCommand("systemctl --user enable wireless")
    if not success:
        print_error("Starting Wireless Service failed")
        exit()

    # fix the issue where the robot sometimes comes on the network as nao.local instead of $robot.local
    print_status("Configure Boot order")
    success = remote.sshCommand("sudo sed -i 's/^Before=.*/Before=network.target avahi-daemon.service/' /etc/systemd/system/hostname.service")
    if not success:
        print_error("Modifying boot order failed")
        exit()

    # Copy and setup Pip packages
    print_status("Setup Pip package")
    src = REDBACKBOTS_CHECKOUT_DIR + "/software/pip/"
    dest = "pip/"
    remote.rsyncFiles(src, dest)

    # for each file in pip/ install package
    for file in os.listdir('software/pip'):
        if file.endswith(".whl"):
            print_subitem("Installing " + file)
            success = remote.sshCommand("pip --disable-pip-version-check install --user pip/" + file)
            if not success:
                print_error("Installing pip package " + file + " failed")
                exit()

    # Enable RedBackBots python service launch on startup
    print_status("Enable RBB Daemon Service")
    success = remote.sshCommand("systemctl --user enable rbb")
    if not success:
        print_error("Starting RBB Daemon Service failed")
        exit()

    # setup lola and restart naoqi
    print_status("Restart Naoqi")
    src = naoHomeDir + "/robocup.conf"
    remote.rsyncFiles(src, "/home/nao/robocup.conf", chmod=CHMOD_GO_NONE)
    success = remote.sshCommand("nao restart")
    if not success:
        print_warning("Nao restart failed, continuing anyway")

    print_status("Setup finished")

def deleteRBB(config):
    print_status("Deleting existing files on the Robot")

    # TODO: fix this when whistle sync'ed correctly
    dest = "/home/nao/whistle"
    remote.deleteFiles(dest)

    # Delete data folder
    dest = cfg.imageDataDirectory()
    remote.deleteFiles(dest)

    # Delete executable
    dest = "/home/nao/redbackbots"
    remote.deleteFiles(dest)
    
    print()

def setWirelessProfile(wireless):
    print_status("Setting wireless profile to: " + wireless)
    
    # Checking profile exists
    profilePath = REDBACKBOTS_CHECKOUT_DIR + "/Install/Profiles/" + wireless
    if os.path.exists(profilePath):
        remote.sshCommand("/home/nao/bin/setprofile " + wireless)
    else:
        print_warning("Cannot find wireless profile " + wireless + ". Not setting wireless profile")


def syncRBB(config, syncAll, volume):
    print_status("Synching Robot")

    # Remove Compiled Python Files
    print_subitem("Removing compiled python files, as new python code is copied")
    remote.sshCommand("shopt -s globstar; rm -rf data/**/*.pyc data/**/*.pyo")

    # Iterate through collection of files to install
    for element in install.installFiles:
        if (element["naosync"]) and \
           (syncAll or element["naosync"] == "Always"):
            print_subitem("Syncing: " + element["description"])
            src = REDBACKBOTS_CHECKOUT_DIR + "/" + element["src"]
            dest = "/home/nao/" + element["dest"]
            if element["directory"]:
                src = src + "/."
                dest = dest + "/."
            if element["dest"] != '':
                # Ensure target directory exists
                command = "mkdir -p " + dest
                remote.sshCommand(command)
            remote.rsyncFiles(src, dest, chmod=element["chmod"])
        else:
            print_subitem("Skipping: " + element["description"])
    
    # Iterate through services
    if syncAll:
        servicesDir = "/home/nao/.config/systemd/user/"
        servicesDefaultDir = servicesDir + "default.target.wants/"
        remote.sshCommand("mkdir -p " + servicesDefaultDir)
        for element in install.services:
            print_subitem("Syncing: " + element + ".service")
            src = REDBACKBOTS_CHECKOUT_DIR + "/Install/Files/" + element + ".service"
            
            # Sync service
            remote.rsyncFiles(src, servicesDir, chmod=CHMOD_GO_NONE)
            
            # Ensure service link to enable service start by default
            symLinkPath = servicesDefaultDir + element + ".service"
            command = "test -e " + symLinkPath + " || " + \
                    "ln -s ../" + element + ".service " + symLinkPath
            remote.sshCommand(command)
    else:
        print_subitem("Skipping: Services")
    print()

    # Whistle audio simlink
    print_warning("Whistle audio simlink not done. TODO - if necessary")
    print()

    # Sync CPP code
    src = cfg.getCppExecutablePath(config)
    dest = "/home/nao/"
    print_status("Syncing RedBackBots Code (build config: " + config + ")")
    remote.rsyncFiles(src, dest, chmod=CHMOD_GO_NONE)
    print()
    
    # Set Volume Setting
    print_status("Setting volume")
    remote.sshCommand("/home/nao/bin/setvolume " + (str(volume) if volume is not None else ''))
    print()

def syncToRobot(robot):
    remote.setHostname(robot)
            
    # Load all robot config
    robotConfig = cfg.loadConfigJSON("Robots/robotsv2.cfg")
    if robot in robotConfig:
        robotConfig = robotConfig[robot]
    else:
        print()
        print_error("Robot Config does not contain: " + robot)
        # unsuccesful.append(robot)
        print()
        return False
    print()

    # Select the IP to sync to 
    if args.ip:
        print_status("Using provided IP")
        print_subitem("Using IP: " + args.ip)
        remote.setIp(args.ip)
        print()
    else:
        print_status("Using Robot IP from configuration")
        individualConfig = cfg.loadConfigFile(cfg.robotConfigDirectory(robot) + "/robot.cfg")
        playerIp = individualConfig['player']['playerIp']
        print_subitem("Using IP: " + playerIp)
        remote.setIp(playerIp)
        print()

    

    # Setup robot - DISABLED
    # if args.s:
        #setupRobot(robot, robotConfig)
        # print()

    # Set Date & Time
    print_status("Setting Data & Time")

    is_online = setDateandTime()
    if is_online:

        # Store the IP of this machine in the robot
        # print_status("Setting Local IP")
        # set_local_ip()

        # Do delete
        if args.d:
            deleteRBB(args.config)

        # Do robot sync
        syncRBB(args.config, args.a, args.volume)
        
        # Set wireless profile
        if args.wireless:
            setWirelessProfile(args.wireless)

        # successful.append(robot)
        return True
    else:
        print_error(f"{robot} seems to be offline, sync aborted")
        print()
        # unsuccesful.append(robot)
        return False


# Main entry point
if __name__ == "__main__":
    # Process args
    parser = argparse.ArgumentParser(description='Sync RedBackBots to a Nao')
    parser.add_argument('-a', action='store_true', help='If set, sync all files, otherwise only sync commonly updated files: NaoImage, Behaviours, and executable')
    parser.add_argument('-b', action='store_true', help='Enable debug mode - does not execute remote commands')
    parser.add_argument('-c', dest='config', type=str, default='Release', choices=['Release', 'Develop', 'Debug'], help='Build configuration to deploy. Default: Release')
    parser.add_argument('-d', action='store_true', help='Delete files on the robot before copying')
    parser.add_argument('-i', action='store_true', help='Create deployable image instead of deploying')
    parser.add_argument('-ip', dest='ip', type=str, help='Provide the robot IP to sync')
    parser.add_argument('-m', action='store_true', help='Use multiple processes to sync faster')
    parser.add_argument('-nc', action='store_true', help='If set, do not compile before creating image or synching (no-compile)')
    parser.add_argument('-r', dest="robot", action='append', help='Sync RedBackBots Software to the robot using the robot IP stored in the configuration. Multiple robots may be specified')
    parser.add_argument('-s', action='store_true', help='(DISABLED) Setup the robot')
    parser.add_argument('-t', action='store_true', help='Sync RedbackBots software to entire team')
    parser.add_argument('-v', dest='volume', type=int, help='Set volume to the specified value')
    parser.add_argument('-w', dest='wireless', type=str, help='Set the robot to use the wireless profile')
    args = parser.parse_args()

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit()
    
    print_status("Nao Sync")
    print_subitem("REDBACKBOTS_CHECKOUT_DIR = "+ REDBACKBOTS_CHECKOUT_DIR)
    print()

    # Setup SSH-SCP object
    if args.b:
        print_warning("Debug Mode Enabled")
    remote = scp.SshScp(debug=args.b)
    
    # Check for robot or ip
    if not args.robot and not args.ip and not args.i and not args.t:
        print_error("No robot/ip given, and/or image not being created")
        print_error("Choose one of these options for nao_sync")
        exit()
    
    # Note on disabled setup option
    if args.s:
        print_error("Setup option is DISABLED as RootImage/OPN is now preferred setup option")
        print_error("Setup flag and code is retained for reference at this time.")
        exit()

    # Ensure Nao code is compiled and up-to-date
    if not args.nc:
        compileRBB(args.config, args.b)

    # Create image if set
    if args.i:
        createImage(args.config, args.volume, args.wireless, args.b)
    else:
        if args.t:
            print("Team Sync!")
            robotConfig = cfg.loadConfigJSON("Robots/robotsv2.cfg")
            robotConfig.pop("**WARNING")
            team = []
            for robot, data in robotConfig.items():
                team.append(robot)
        successful = []
        unsuccessful = []
        if args.m:
            print("Syncing with multiple processes!")
            with multiprocessing.Pool(processes = 8) as pool:
                targets = team if args.t else args.robot
                results = pool.map(syncToRobot, targets)
                for i in range(len(results)):
                    if results[i]:
                        successful.append(targets[i])
                    else:
                        unsuccessful.append(targets[i])
        else:
            for robot in team if args.t else args.robot:
                result = syncToRobot(robot)
                if result:
                    successful.append(robot)
                else:
                    unsuccessful.append(robot)

    print()
    print_status("nao_sync done")
    print()
    
    if len(successful) > 0:
        print_status(f"Succesfully synced to: {' '.join(successful)}") 
    if len(unsuccessful) > 0:
        print_error(f"Failed to sync to: {' '.join(unsuccessful)}")
    print()
    