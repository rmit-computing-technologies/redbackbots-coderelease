#! /usr/bin/env python3

'''
team_config:
- Set up the config files for all online robots

@author
- Tom Ellis
- Sam Griffiths (Made speedy)
'''
import argparse
import multiprocessing
import signal
import sys
import rbbpython.config as cfg
from rbbpython.echo import (
    unix_colours,
    print_error,
    print_status,
    print_warning,
    print_subitem,
    print_success,
    print_banner
)
import rbbpython.install as install
import rbbpython.shellEscape as shell
import rbbpython.sshscp as scp

remote = scp.SshScp()
# remote.setHideOutput(True)

remote = scp.SshScp()
# remote.setHideOutput(True)

def signal_handler(sig, frame):
    print()
    print_status("Exiting Team Config!")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

def get_robot_ip(robot):
    robot_config = cfg.loadConfigFile(cfg.robotConfigDirectory(robot) + "/robot.cfg")
    return robot_config['player']['playerIp']

def get_robot_ip(robot):
    robot_config = cfg.loadConfigFile(cfg.robotConfigDirectory(robot) + "/robot.cfg")
    return robot_config['player']['playerIp']


def ping_robot(robot):
    robotConfig = cfg.loadConfigFile(cfg.robotConfigDirectory(robot) + "/robot.cfg")
    robotIP = robotConfig['player']['playerIp']
    print_subitem(f"Pinging robot using IP: {robotIP}", robot)

    response = shell.exec("ping -c 2 -W 2 " + robotIP, hideOutput=True)
    if not response:
        print_warning(f"Robot does not appear to be online", robot)
    return response

def robot_selection(robots):
    input_valid = False
    while not input_valid:
        print_status("Robot Configuration [LOCAL]")
        for robot in robots:
            robot_config = cfg.loadConfig(f"Robots/{robot}/robot.cfg")["player"]
            print_subitem(f"Player: {robot_config['number']} Team: {robot_config['team']}", robot)
        print_status(f"Enter a robot to configure (press enter to configure {robots[0]})")
        user_input = input("        ")
        if user_input in robots:
            return user_input
        elif user_input == "":
            return robots[0]
        print_error("Robot not in list of active robots")

def configure_robot(robot):
    print_status(f"Configuring", robot)
    robot_config = cfg.loadRawConfig(f"Robots/{robot}/robot.cfg")['player']
    print_subitem(f"Player: {robot_config['number']} Team: {robot_config['team']}", robot)
    print_status("Enter new Player Number (or press enter to keep as is)", robot)
    new_number = input("        ")
    print_status("Enter new Team Number (or press enter to keep as is)", robot)
    new_team = input("        ")
    new_config = {
        "robot"  : robot,
        "number" : new_number if new_number != "" else robot_config['number'],
        "team"   : new_team if new_team != "" else robot_config['team'] 
    }
    cfg.writeConfig(f"Robots/{robot}/robot.cfg", "player", {"number": new_config["number"], "team": new_config["team"]})
    return new_config

def fetch_remote_config(robot):
    robot_ip = get_robot_ip(robot)
    remote.setIp(robot_ip)
    response = remote.sshCommandWithSession(f"cat config/Robots/{robot}/robot.cfg", silent=True)
    number = -1
    team = -1
    for line in response:
        if "number" in line:
            number = line.removeprefix("number=").removesuffix("\n")
        elif "team" in line:
            team = line.removeprefix("team=").removesuffix("\n")
    return {
        "number": number,
        "team": team
    }

# Main entry point
if __name__ == "__main__":
    # Process args
    parser = argparse.ArgumentParser(description='Update Team and Player Number Robot Configs')
    parser.add_argument('-a', action='store_true', help='If set, set config for all robots regardless of online status')
    parser.add_argument('-r', dest="robots", action='append', help='Configure only specified robots')
    parser.add_argument('-s', action='store_true', help='Use single processing for pinging online robots')
    parser.add_argument('-c', action='store_true', help='Check actual config on robots')
    args = parser.parse_args()

    print_banner("Setting up team config!", unix_colours.MAGENTA)

    robotConfig = cfg.loadConfigJSON("Robots/robotsv2.cfg")
    robotConfig.pop("**WARNING")

    robots = []

    if args.robots:
        robots = args.robots
        print_status(f"Setting Config/s for {robots}")
    elif args.a:
        robots = [robot for robot, data in robotConfig.items()]
        print_status("Setting Configs for all robots")
    else:
        if args.s: 
            print_status("Finding Robots on the network")
            online_robots = []
            for robot, data in robotConfig.items():
                if (ping_robot(robot)):
                    online_robots.append(robot)
        else:
            print_status("Finding Robots on the network")
            print_status("Pinging with multiple processes")
            online_robots = []
            robots = [robot for robot, data in robotConfig.items()]

            with multiprocessing.Pool(processes = len(robots)) as pool:
                results = pool.map(ping_robot, robots)
                for i in range(len(results)):
                    if results[i]:
                        online_robots.append(robots[i])

        if len(online_robots) == 0:
            print_warning("No robots seem to be online, are you on the right network?")
            print_status("Press Enter to configure all robots")
            input()
            robots = [robot for robot, data in robotConfig.items()]
            args.a = True
        else:
            print_status("The following robots are online:")
            print_subitem(online_robots)
            robots = online_robots
            print()

    if args.c and not args.a:
        print_status("Robot Configuration [ON ROBOT]")
        for robot in robots:
            config = fetch_remote_config(robot)
            print_subitem(f"Player: {config['number']} Team: {config['team']}", robot)

    configured_robots = []
    while(len(robots)>0):
        robot = robot_selection(robots)
        configured_robot = configure_robot(robot)
        robots.remove(robot)
        configured_robots.append(configured_robot)
        for robot in configured_robots:
            print_success(f"Player: {robot['number']} Team: {robot['team']}", robot['robot'])
    print()
    print_success("All robots configured!")
