#! /usr/bin/env python3

'''
nao_build:
- Build the RedBackBots C++ Codebase

Command line options
-r Release to build
-h Show help

@author
- based on rUNSWift nao_build
- Timothy Wiley
- RedBackBots
'''

import argparse
import os
import pathlib
import re
import subprocess
import sys

sys.path.append(os.environ['REDBACKBOTS_CHECKOUT_DIR'] + "/Make/Common")
import rbbpython.config as cfg
from rbbpython.echo import (
    print_error,
    print_status,
    print_warning,
    print_progress,
    print_subitem,
    print_success,
    query_yes_no
)
import rbbpython.shellEscape as shell
import rbbpython.sshscp as scp

# Global Parameters
REDBACKBOTS_CHECKOUT_DIR = cfg.rbbCheckoutDirectory()
remote = scp.SshScp()


# Main entry point
if __name__ == "__main__":
    print_status("RBB Build")
    print_subitem("REDBACKBOTS_CHECKOUT_DIR = "+ REDBACKBOTS_CHECKOUT_DIR)

    # Process args
    parser = argparse.ArgumentParser(description='Build RedBackBots')
    parser.add_argument('-r', type=str, default="Release", help='Release to Build (Release | Develop | Debug)')
    parser.add_argument('target', default="all", nargs="?", type=str, help='Target to Build (all | Nao | Offnao | BoostTest | LolaTest | clean)')
    args = parser.parse_args()

    release = "Release"
    if args.r:
        release = args.r

    target = ""
    if args.target:
        target = args.target

    buildDir = cfg.getBuildDirectory("Linux", release)
    if not os.path.exists(buildDir):
        print_error("{{Build ({0}) does not exist!}}".format(buildDir))
        print_error("Run ./Make/<platform>/generate")
        exit(-1)

    # BUILD!!!
    # cmake --build ../../Build/Linux/CMake/$CONFIG $TARGET --config $CONFIG
    command = 'cmake --build {rbbcd}/Build/Linux/CMake/{release} --target {target} --config {release}'.format(
        rbbcd = REDBACKBOTS_CHECKOUT_DIR,
        release = release,
        target = target
    )
    print_status("Building with:")
    print_subitem(command)
    print()

    # call command, throw if fail
    subprocess.check_call([command], shell=True)

    print()
    print_success("nao_build done")